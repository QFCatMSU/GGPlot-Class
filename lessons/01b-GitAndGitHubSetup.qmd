---
title: "01b: Git and GitHub Setup"
# special characters for highlighting code : «»
---

### To-dos

-   Show how to use Git tab in app as an extension

## Purpose

-   Setup Git on your computer

-   Use Git to connect your RStudio Project to a GitHub repository

-   Share your GitHub repository

### Prerequisite

You will need a GitHub account to complete this lesson. You can sign up for an account at <https://github.com>.

## Git and GitHub

For this class, we will use Git and GitHub for your class assignments.

 

***Git*** and ***GitHub*** are two terms that are often conflated. [Git]{.hl} is versioning software -- you use Git on your computer to document and create a history of your project.  Using the project history, you can bring back previous versions of files or your entire Project.  Git calls the project, along with its full history, a [repository]{.hl}.

 

[GitHub]{.hl} is an online software develoment platform and a place to store, sync, and share your Git repository. When combined, Git and GitHub make a very powerful project-management system.

 

While Git and GitHub are very powerful tools, they are not intuitive and there is a pretty high-barrier to entry. This lesson is designed to allow you to do the very basics in Git and GitHub.

## Install Git on your computer (need version 2.44 or higher)

For ***Windows***, [click here to download and install Git](https://git-scm.com/downloads) -- click on ***Download for Windows***. Git asks a lot of questions during installation and you can choose the default option for everything.

 

For ***Mac***, [there is no direct installation of Git]{.hl}. I recommend using **Homebrew**, which is a useful tool for any programmer using a Mac because it gives you access to a bunch of programming tools.

### Homebrew installation of Git on Mac:

-   Go to the [Homebrew homepage](https://brew.sh/)

-   Copy the text under the heading ***Install Homebrew***

-   Paste the text in a ***Terminal*** window (RStudio has a ***Terminal*** tab in the bottom-left pane)

    -   Be patient -- it takes time to install!

-   When Homebrew is finished installing, install ***Git*** by typing in the ***Terminal***:

``` bash
brew install git 
```

-   And then install the credential manager by typing in the Terminal:

``` bash
brew install --cask git_crendential_manager
```

#### Alternate installation for Git on Mac

If you cannot get ***Homebrew*** to work, [other options are available here](https://git-scm.com/download/mac). ***MacPort*** is the best alternative. ***XCode*** will work but it is a huge installation (at least 20GB), and most of it is not going to be used. The ***Binary Installer*** option is the easiest but is too outdated.

## RStudio Terminal

We will be using the ***Terminal*** tab in RStudio to setup Git and to connect your project to a repository on GitHub. The ***Terminal*** in RStudio is a tab in the lower left area in RStudio. The ***Terminal*** tab is similar to the Command Prompt in Windows or Terminal in Mac

 

Most of the Terminal command used in this lesson will only work if you are in the correct RStudio Project. The RStudio Project name (in @fig-RStudioTermProj it is ***My_Project***) is in the upper-right corner of RStudio.

![RStudio Terminal tab (don't forget to check the Project Folder)](images/RStudioTerminalAndProject.png){#fig-RStudioTermProj .fs}

## Configuring Git on your computer

To use Git for your project, you first need to configure Git on your computer with your GitHub username and email. The username and email are used by Git and GitHub to identify who made what changes in the project history – this is especially important when you are collaborating on a project.

 

[Git will not check if you put in wrong or invalid usernames and emails]{.hl}.

### Adding the username and email

We will use the RStudio ***Terminal*** tab to enter these values.

 

The first command sets the global user name (replace ***userName*** with your GitHub ID):

``` {.bash tab="Terminal"}
git config --global user.name "userName"
```

And the second command sets the global user ***email*** (replace ***email*** with the email you used to signup for GitHub):

``` {.bash tab="Terminal"}
git config --global user.email "email"
```

![Changing Git username and email using the Terminal tab](images/GH_EmailAndUsername.png){#fig-terminalTab .fs}

### Viewing the configured values

You can check if you successfully changed the username and email by executing these lines in the ***Terminal*** tab:

``` {.bash tab="Terminal"}
git config user.name 
git config user.email
```

After executing the two above command, [your **Terminal** tab should look similar]{.hl} to this:

::: {#fig-testGitConfig}
``` {.bash tab="Terminal"}
$ git config user.name 
belinskyc  
$ git config user.email 
belinsky@msu.edu
```

Testing the git configuration using the RStudio Terminal tab
:::

## Add Git Repository to your RStudio Project folder

Both RStudio Projects and Git Repositories are set up in your Project Folder (i.e., the root folder for your project).

 

**To add a Git repository to your RStudio Project folder**

1.  Make sure your RStudio Project is open

    -   Look for your Project name in the upper-right corner (In @fig-RStudioTermProj it is ***My_Project***)

2.  Type `git init -b main` in the Terminal

    -   This command ***init***ializes ***git*** and sets the initial ***b***ranch name to ***main***
    -   You should get a message in the Terminal like:
        -   `Initialized empty Git repository in C:/Users/Charlie/...`

3.  Restart RStudio

### RStudio Git tab

When you add Git to an RStudio Project folder, a ***Git*** tab will appear in the upper-right window. This is RStudio's built-in Git interface and it can handle many commonly performed Git functions, including most of the things needed for class.

![The Git tab has been added to the RStudio Project](images/GH_02_GitTab.png){#fig-GitTab .fs}

## Create a GitHub repository

A [GitHub repository]{.hl} is an online storage location that syncs with the Git repository (Project Folder) on your computer.

 

To create a GitHub repository (@fig-GitURL)

1.  Log in to GitHub
2.  Click on the ***+*** at the top-right and choose ***New Repository***
3.  Choose a repository name (any name you want -- just remember you are sharing it!)
4.  Choose whether you want the repository to be **Public** or **Private** (this can be changed later)
    -   ***Public*** means that anyone with the repository link can view (but not edit) your files

    -   ***Private*** means that only users you add in ***Settings -\> Manage Access*** can view the repository
5.  Click ***Create Repository***

![Creating a new repository on GitHub](images/GH_CreateRepo.png){#fig-GitURL .fs}

### Get the GitHub URL

To link the Git repository on your computer with this GitHub repository, you will need the URL for the GitHub repository. After you create the new repository, a window will appear ( @fig-GitHubURL) with the URL at the top in the ***Quick Setup*** section. [Copy this URL and save it]{.hl}-- you will use it in the next section.

![The URL of your GitHub repository](images/GH_RepoUrl.png){#fig-GitHubURL .fs}

The GitHub repository link is the URL that takes you directly to the online project.  A GitHub repository link is always in this format:

`https://github.com/<github_user_name>/<github_repository_name>.git`**\
**

So, if my GitHub username is ***QFCatMSU*** and my repository name is ***gitHubTest*** then the link is:

`https://github.com/qfcatmsu/githubtest.git`

[Note: capital/lowercase does not matter and .git is optional]{.note}

 

If you lose the ***Quick Setup*** page then the URL is going to be the part of the URL for your repository circled in @fig-GitHubURL

### Inviting the instructor to your repository

To invite a user (or, as GitHub calls them, ***collaborator***) to your repository:

1.  Go to the GitHub home page for your repository and click ***Settings***

2.  Click ***Collaborators***

3.  Click ***Add people***

    -   You can use either the person's GitHub ID or their email address associated with their GitHub ID

    -   invite your instructor: ***belinsky\@msu.edu*** or ***belinskyc***

![Inviting a user to your GitHub Repository](images/GH_AddUser.png){#fig-invite .fs}

## Linking your Git repository to a GitHub repository

In this section we are going to link your Git repository, which is in the same folder as your RStudio Project, with your GitHub Repository.  The GitHub repository will become the online version of your Git repository. 

[Warning: This only works if the GitHub repository is empty .]{.hl}

 

Type the line below into the ***Terminal***. Replace the URL with the URL for your GitHub repository. Make sure your are in your RStudio Project.

``` bash
git remote add origin "https://github.com/myUserName/myRepository.git"
```

[Note: In Windows, **Control-V** does not paste in a Terminal window, but **right-click** -\> **Paste** works]{.note}

### If you added the wrong repository name...

Then you first need to remove the current GitHub repository (i.e., the ***origin***):

``` bash
git remote rm origin
```

and then repeat this line (using your GitHub URL)

``` bash
git remote add origin "https://github.com/myUserName/myRepository.git"
```

## Uploading to the GitHub repository

Git/GitHub is asynchronous. [Changes to your local project are not automatically uploaded to GitHub]{.hl} – you need to explicitly upload the changes.

 

To upload your changes to GitHub, in the ***Terminal*** type:

``` bash
git add -A
git commit -m "A message about the changes to your project"
git push -u origin main
```

You will repeat these lines every time you turn in an application.

-   The first line compiles all the changes you have made to your project

-   The second line accepts, and adds a message about, your changes

-   The third line sends the changes with the message to GitHub.

### Authenticating with GitHub

GitHub will ask for authentication [the first time you connect to a GitHub repository]{.hl} on a computer:

![GitHub asking for authentication](images/GitHubLogin-new.png){#fig-GitHubAuth .fs}

When you click ***Sign in with your browser***, your default browser will open to the GitHub login page.

 

After you login you will get an Authentication Successful window:

![The Authentication Successful window](images/GH_Repo_AuthSuccess.jpg){#fig-authSuccess .fs}

## Verifying the change on GitHub

Let's go to your GitHub account to verify that the project files are there (@fig-GitHubPostCommit):

1.  Log in to GitHub

2.  On the left side, there is a section called ***Repositories***. 

3.  Click on the repository called ***\<your-user-name\>***/**\<your-repository-name\>**

4.  Choose the ***Code*** tab (you are probably already on it)

 

You should notice that the files changed in the newest Commit have your Commit message attached (my Commit message: "A message about...") and the last commit for these files is recent (in this case: 9 minutes). 

![GitHub after a new Commit was pushed](images/GH_First%20Push.png){#fig-GitHubPostCommit .fs}

## Application

A\) Append to the top of your ***app01.r*** the [Questions to answer] for this lesson.

B\) Send the change to GitHub by executing these lines in the ***Terminal***:

``` bash
git add -A
git commit -m "Finished lesson 1b application"
git push -u origin main
```

Alternatively, you can use the Git tab: [Extension: Use Git Tab]

 

::: {#Issues}
C\) Inform your instructor the application is done by creating an Issue:
:::

1.  Click on ***Issues*** (top of page)

2.  Click on ***New Issue*** (green button – not pictured)

3.  Click on Setting wheel and add the instructor as an assignee (***belinskyc***)

4.  Put in ***title*** that application 1b is finished, add anything you want to the ***description***, and

5.  Click ***Submit new issue***

![Creating an Issue in GitHub](images/GitHubIssues.png "flexer=true"){#fig-GitHubIssue .fs grrr="true"}

### Questions to answer

Answer the following in comments inside your application script:

1.  What was your level of comfort with the lesson/application?

2.  What areas of the lesson/application confused or still confuses you?

3.  What are some things you would like to know more about that is related to, but not covered in, this lesson?

## Extension: Use Git Tab

The Git tab can be used to sync changes from your Project Folder to your GitHub repository.

1.  In the Git tab, click ***Commit*** and the ***RStudio Review Changes*** window appears

2.  On the left, check the files you want to sync with your GitHub repository (you do not have to check all of them)

3.  On the right side, put a message in that describes the changes

4.  Click ***Commit*** in the lower right

5.  Close the window that pops up (not pictured)

6.  click ***Push*** in the upper-right

7.  Close the windows

![Using the Git tab to sync with your Github repository](images/GH_UsingGitTab.png){#fig-usingGitTab .fs}
